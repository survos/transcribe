<?php

namespace App\Services;

use Soothsilver\DtdParser\Element;
use Symfony\Component\Serializer\Annotation\SerializedName;
use Soothsilver\DtdParser\Dtd\Parser;

class MltService
{

    /**
     * @var string
     */
    private $projectDir;

    public function __construct($projectDir)
    {
        $this->projectDir = $projectDir;
    }

    /**
     * Load the DTD and generate Entity classes with the appropriate @SerializedName()
     */
    public function generateClasses()
    {
        $dtdText = file_get_contents(__DIR__ . '/../../mlt-xml.dtd');
        $dtd = \Soothsilver\DtdParser\DTD::parseText($dtdText);
        $newFiles = [];

        foreach ($dtd->elements as $code => $element) {
            $shortName = ucfirst($code);
            $class = 'App\\Entity\\' . ucfirst($code);
            $file = sprintf('%s/src/Entity/Mlt/%s.php', $this->projectDir, $shortName);
            if (!file_exists($file)) {
                dump($file);
                dd("bin/console make:entity Mlt\\\\$shortName -n");
            }
            $php = file_get_contents($file);

            $newPhp = $this->getPhpCode($shortName, $element);

            file_put_contents($file, $newPhp);
            array_push($newFiles, [$file => $newPhp]);
        }

        return $newFiles;

    }

    private function getPhpCode($shortName, $element)
    {
        $startTemplate = <<< END
<?php

// generated by %s
namespace App\Entity\%s;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Serializer\Annotation\SerializedName;

/**
 * @ORM\Entity(repositoryClass="App\Repository\%s\%sRepository")
 */
class %s
{
    /**
     * @ORM\Id()
     * @ORM\GeneratedValue()
     * @ORM\Column(type="integer")
     */
    private \$id;

    public function getId(): ?int
    {
        return \$this->id;
    }
END;

        $name = $shortName;
        $code = [
            sprintf($startTemplate, __CLASS__, $name, $name, $name, $name)
            ];

        $template = <<< REGEXP
    /**
     * @ORM\Column(type="string", length=32, nullable=%s)
     * @SerializedName("@%s")
     */
    private $%s;

REGEXP;

        /** @var \Soothsilver\DtdParser\Dtd\Element */
        foreach ($element->attributes as $name=>$attribute) {
            $block = sprintf($template,  $attribute->defaultType === '#REQUIRED' ? 'false' : 'true', $name, $name);
            array_push($code, $block);
        }
        /**  */

        // finish the class code block
        array_push($code, '}');
    return join("\n", $code);
    }

}